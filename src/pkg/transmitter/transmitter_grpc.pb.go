// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: api/transmitter.proto

package transmitter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Transmitters_Transmit_FullMethodName = "/transmitters.Transmitters/Transmit"
)

// TransmittersClient is the client API for Transmitters service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransmittersClient interface {
	Transmit(ctx context.Context, in *TransmitterRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TransmitterResponse], error)
}

type transmittersClient struct {
	cc grpc.ClientConnInterface
}

func NewTransmittersClient(cc grpc.ClientConnInterface) TransmittersClient {
	return &transmittersClient{cc}
}

func (c *transmittersClient) Transmit(ctx context.Context, in *TransmitterRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TransmitterResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Transmitters_ServiceDesc.Streams[0], Transmitters_Transmit_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TransmitterRequest, TransmitterResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Transmitters_TransmitClient = grpc.ServerStreamingClient[TransmitterResponse]

// TransmittersServer is the server API for Transmitters service.
// All implementations must embed UnimplementedTransmittersServer
// for forward compatibility.
type TransmittersServer interface {
	Transmit(*TransmitterRequest, grpc.ServerStreamingServer[TransmitterResponse]) error
	mustEmbedUnimplementedTransmittersServer()
}

// UnimplementedTransmittersServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransmittersServer struct{}

func (UnimplementedTransmittersServer) Transmit(*TransmitterRequest, grpc.ServerStreamingServer[TransmitterResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Transmit not implemented")
}
func (UnimplementedTransmittersServer) mustEmbedUnimplementedTransmittersServer() {}
func (UnimplementedTransmittersServer) testEmbeddedByValue()                      {}

// UnsafeTransmittersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransmittersServer will
// result in compilation errors.
type UnsafeTransmittersServer interface {
	mustEmbedUnimplementedTransmittersServer()
}

func RegisterTransmittersServer(s grpc.ServiceRegistrar, srv TransmittersServer) {
	// If the following call pancis, it indicates UnimplementedTransmittersServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Transmitters_ServiceDesc, srv)
}

func _Transmitters_Transmit_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TransmitterRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransmittersServer).Transmit(m, &grpc.GenericServerStream[TransmitterRequest, TransmitterResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Transmitters_TransmitServer = grpc.ServerStreamingServer[TransmitterResponse]

// Transmitters_ServiceDesc is the grpc.ServiceDesc for Transmitters service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Transmitters_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transmitters.Transmitters",
	HandlerType: (*TransmittersServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Transmit",
			Handler:       _Transmitters_Transmit_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/transmitter.proto",
}
